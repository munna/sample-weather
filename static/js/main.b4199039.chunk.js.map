{"version":3,"sources":["App.js","index.js"],"names":["mapboxgl","accessToken","mapStyles","title","uri","layername","addDataLayers","map","zoom","firstSymbolId","layers","getStyle","i","length","type","id","removeLayer","removeSource","e","getSource","addSource","tiles","getLayer","addLayer","App","mapContainer","useRef","useState","lng","setLng","lat","setLat","setZoom","growthValue","setGrowthValue","useEffect","current","Map","container","style","center","addControl","MapboxStyleSwitcherControl","NavigationControl","FullscreenControl","on","getCenter","toFixed","getZoom","getCanvas","cursor","features","properties","TMP","isSourceLoaded","geojson","querySourceFeatures","sourceLayer","console","log","ref","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4199039.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport mapboxgl from 'mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\r\nimport turf from 'turf';\r\nimport { MapboxStyleSwitcherControl } from \"mapbox-gl-style-switcher\";\r\nimport SideBar from './components/SideBar'\r\nimport {fillColors} from './plate';\r\nimport \"mapbox-gl-style-switcher/styles.css\";\r\n//import * as temprature from './style/mapbox/temprature.json';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibXVubmFiaGFrdGEiLCJhIjoiY2piYzQ5MXUwMWZhYzJxcmo5Njk0ZzkwNSJ9.kcVCdJO6I-kJsWNHB9Lumw';\r\n\r\nconst mapStyles = [\r\n  {\r\n      title: \"Outdoor\",\r\n      uri:\"mapbox://styles/munnabhakta/ckq3mhj8s0gw718qcdob0ikm8\"\r\n  },\r\n  {\r\n      title: \"Dark\",\r\n      uri:\"mapbox://styles/munnabhakta/ckq3mpjju4b0b17n6qys5pbu3\"\r\n  },\r\n  {\r\n      title: \"Satellite\",\r\n      uri:\"mapbox://styles/munnabhakta/ckq2dmu4y1ql917p9c7232odt\"\r\n  },\r\n  {\r\n    title: 'Basic',\r\n    uri: 'mapbox://styles/munnabhakta/ck9zcmwgc1ma31iph4a849nl9'\r\n\r\n  }\r\n];\r\nlet layername =\"\";\r\nconst addDataLayers= (map,zoom) => {\r\n \r\n  if( (zoom<10 && layername === 'temperature_large') || (zoom>=10 && layername === 'temperature_research')) {\r\n    return ;\r\n  }\r\n  var layers = map.getStyle().layers;\r\n        // Find the index of the first symbol layer in the map style\r\n          var firstSymbolId;\r\n          for (var i = 0; i < layers.length; i++) {\r\n              if (layers[i].type === 'symbol') {\r\n              firstSymbolId = layers[i].id;\r\n              break;\r\n          }\r\n        }\r\n        try {\r\n          \r\n          map.removeLayer('temprature');\r\n          map.removeSource('temprature');\r\n        } catch(e) {\r\n\r\n        }\r\n         \r\n        if(zoom < 10 ) {\r\n          layername = 'temperature_large';\r\n        } else {\r\n          layername = 'temperature_research';\r\n        }\r\n        firstSymbolId = 'road-path';\r\n        if (!map.getSource(\"temprature\")) {\r\n        map.addSource('temprature', {\r\n          type: 'vector',\r\n          // use the tiles option to specify a WMS tile source URL\r\n          // https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/\r\n          tiles: [\r\n            'http://213.199.128.75:8080/geoserver/gwc/service/wmts?REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&LAYER=Test:'+layername+'&TILEMATRIX=EPSG:900913:{z}&TILEMATRIXSET=EPSG:900913&FORMAT=application/vnd.mapbox-vector-tile&WIDTH=256&HEIGHT=256&TILECOL={x}&TILEROW={y}'\r\n            ],\r\n          //'minZoom': 0,\r\n          //'maxZoom': 20,\r\n        });\r\n      }\r\n      if (!map.getLayer(\"temprature\")) {\r\n        map.addLayer(\r\n          {\r\n            'id': 'temprature',\r\n            'type': 'fill',\r\n            'source': 'temprature',\r\n            'source-layer': layername,\r\n            'layout': {\r\n              // Make the layer visible by default.\r\n              'visibility': 'visible'\r\n              },\r\n              // paint: {\r\n              //   'fill-color': 'red',\r\n              // },\r\n            'paint': {\r\n              'fill-outline-color':'rgba(255,255,255,0.0)',\r\n              // 'fill-pattern': \"hexagon\",\r\n              'fill-color': {\r\n                'property': 'TMP',\r\n                'stops': [\r\n                  [-50, 'hsl(358, 100%, 100%)'],\r\n                  [-24.000, 'hsl(358, 100%, 90%)'],\r\n                  [-11.000, 'hsl(358, 100%, 80%)'],\r\n                  [-3.000, 'hsl(358, 100%, 70%)'],\r\n                  [5.000, 'hsl(358, 100%, 65%)'],\r\n                  [15.000, 'hsl(358, 100%, 60%)'],\r\n                  [25.000, 'hsl(358, 100%, 55%)'],\r\n                  [35.000, 'hsl(358, 100%, 50%)'],\r\n                  [45.000, 'hsl(358, 100%, 45%)'],\r\n                  [55.000, 'hsl(358, 100%, 40%)'],\r\n                  [65.000, 'hsl(358, 100%, 35%)'],\r\n                  [75.000, 'hsl(358, 100%, 30%)'],\r\n                  [85.000, 'hsl(358, 100%, 25%)'],\r\n                  [95.000, 'hsl(358, 100%, 20%)'],\r\n                  [105.000, 'hsl(358, 100%, 15%)'],\r\n                ]\r\n              },'fill-opacity':.6,\r\n             },\r\n          },firstSymbolId\r\n          //,'aeroway-line'\r\n        );\r\n      }\r\n      }\r\n\r\nexport default function App() {\r\n    const mapContainer = useRef(null);\r\n    const map = useRef(null);\r\n    const [lng, setLng] = useState(2.2235539);\r\n    const [lat, setLat] = useState(50.4795101);\r\n    const [zoom, setZoom] = useState(7);\r\n    const [rank, setRank] = useState(0.0);\r\n    const [growthValue,setGrowthValue] = useState(0.0);\r\n    \r\n    useEffect(() => {\r\n        if (map.current) return; // initialize map only once\r\n        map.current = new mapboxgl.Map({\r\n          container: mapContainer.current,\r\n          style: 'mapbox://styles/munnabhakta/ckq2dmu4y1ql917p9c7232odt',\r\n          center: [lng, lat],\r\n          zoom: zoom\r\n        });\r\n\r\n        map.current.addControl(new MapboxStyleSwitcherControl(mapStyles, \"Satellite\"))\r\n        map.current.addControl(new mapboxgl.NavigationControl())\r\n        map.current.addControl(new mapboxgl.FullscreenControl())\r\n        \r\n      });\r\n      useEffect(() => {\r\n        if (!map.current) return; // wait for map to initialize\r\n            map.current.on('move', () => {\r\n                setLng(map.current.getCenter().lng.toFixed(4));\r\n                setLat(map.current.getCenter().lat.toFixed(4));\r\n                if(map.current.getZoom() !== zoom ) {\r\n                  addDataLayers(map.current,zoom);\r\n                }\r\n                setZoom(map.current.getZoom().toFixed(2));\r\n                \r\n            });\r\n            map.current.on('style.load', function(){\r\n              addDataLayers(map.current,zoom);\r\n              \r\n            })\r\n            map.current.on('mousemove', 'temprature', (e) => {\r\n              map.current.getCanvas().style.cursor = 'pointer';\r\n              // Set variables equal to the current feature's magnitude, location, and time\r\n              if(e.features.length>0){\r\n              // setRank(e.features[0].properties.rank)\r\n              //console.log(e.features[0].properties);\r\n              setGrowthValue(e.features[0].properties.TMP); \r\n              }\r\n              \r\n            });\r\n            map.current.on('load', function () {\r\n              addDataLayers(map.current,zoom);\r\n              \r\n        });\r\n        map.current.on('sourcedata', function () {\r\n          if(map.current.isSourceLoaded('temprature')){\r\n          var features = map.current.querySourceFeatures('temprature',{sourceLayer:'temprature'});\r\n          var geojson = {\r\n            \"type\": \"FeatureCollection\",\r\n            \"features\": features\r\n          }\r\n          console.log(geojson);\r\n        }\r\n        // try {\r\n        //   const bbox = turf.bbox(geojson);\r\n        //   if(bbox[0] !== Infinity){\r\n        //     map.current.setLayoutProperty(\r\n        //       'temprature',\r\n        //      'visibility',\r\n        //       'none'\r\n        //       );\r\n        //   }\r\n        // } catch(e) {\r\n        // console.log(e);\r\n        // }\r\n\r\n\r\n          //var1:number_of_businesses_employees_growth;w0:100;w1:1;\r\n          //w2:1;radius:40233;lat:40.835736064021916;lon:-73.9852294754237;tbl:zipcodes;dtype:24;rerank:100\r\n    });\r\n      });\r\n      return (\r\n        <div >\r\n            \r\n          <div ref={mapContainer} className=\"map-container\" >\r\n         \r\n          </div>\r\n          <div className=\"sidebar\">\r\n                Longitude: {lng} | Latitude: {lat} | Zoom: {zoom} | temprature : {growthValue}\r\n            </div>\r\n        </div>\r\n      );\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport './style/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}